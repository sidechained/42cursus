# get_next_line approach notes

key point: a static variable is necessary to store the extra characters read after a newline

Q: must static variable KEEP be declared and initialised outside read_line function and passed in?
A: 

get_next_line()
{
	loop while line != NULL
	{
		line = read_line
	}
}

read_line()
{
	allocate memory of size BUFFER_SIZE + 1, call this BUF

	loop while num_bytes_read > 0
	{
		read next BUFFER_SIZE chars from file, store in BUF

		if \n found in KEEP:
			extract the part up to and including the \n to return it as LINE
			save the rest of the characters in KEEP
	}

}



when read return 0 it means we are at the end of the file

get_next_line function
- returns contents of the line + \n
- or NULL in case of error/nothing more to read
- usage: successively called until a NULL is returned

Q: what happens when buffer size covers two newlines


text:
"First line (10 chars)
Second Line (11 chars)
Third Line
Forth Line"

buffer_size = 24

on first read:
"First line 
Second Line 
Thi"

we keep the part up to and inc the first newline
"First line\n"

the remainder is kept within our static variable 'keep'
"Second Line 
Thi"

A static variable doesnâ€™t lose its memory that easily. Its data persists until the end of the program, whether or not the function in which it was declared ends.

on second read:

our function should:

read n chars from our file
store them in KEEP
if '\n' found in KEEP:
	stop the loop
	split off everything up to and including /n and call this LINE
keep will just have what remains


get_line
