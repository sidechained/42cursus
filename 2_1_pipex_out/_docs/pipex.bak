// PROBLEM: 2nd dup2 statement in execute_cmd1 + execute_cmd2 fails! WHY?!
// cmd1 is child process, cmd2 is parent process
// good ref: https://github.com/andrei-sergeich/pipex/tree/main/srcs_man

// ./pipex infile ``ls -l'' ``wc -l'' outfile
// ./pipex infile ``grep a1'' ``wc -w'' outfile



#include <stdio.h>
#include <unistd.h>
#include <sys/stat.h> // open
#include <fcntl.h>	  // open
#include <stdlib.h>	  // malloc
#include <string.h>	  // ft_strstr
#include <assert.h>	  // str_split
#include <sys/types.h>	// waitpid
#include <sys/wait.h>	// waitpid
#include "libft.h"

#define STDIN_FD 0
#define STDOUT_FD 1

char **get_paths_from_env(char **env)
{
	while (ft_strncmp("PATH=", *env, 5))
		env++;
	return (ft_split(*env + 5, ':'));
}

void execute_cmd(char *cmd, char **env)
{
	char **split_cmd;
	char **paths;
	int i = 0;

	split_cmd = ft_split(cmd, ' ');
	paths = get_paths_from_env(env);
	while (paths[i])
	{
		execve(ft_strjoin(ft_strjoin(paths[i], "/"), split_cmd[0]), &split_cmd[1], env);
		i++;
	}
}

void execute_cmd1(char *infile, char *cmd1, int *p, char **env)
{
	int in_fd;

	close(p[0]);
	in_fd = open(infile, O_RDONLY);
	if (in_fd == -1)
	{
		printf("read error/n");
		return ;
	}
	close(in_fd);	
	dup2(in_fd, STDIN_FD);
	dup2(p[1], STDOUT_FD);
	execute_cmd(cmd1, env);
}

void execute_cmd2(char *outfile, char *cmd2, int *p, char **env)
{
	int	status;
	int out_fd;

	close(p[1]);
	// waitpid(-1, &status, 0);
	dup2(p[0], STDIN_FD);
	out_fd = open(outfile, O_CREAT | O_RDWR | O_TRUNC, 0644);
	if (out_fd == -1)
	{
		printf("write error/n");
		return ;
	}
	close(out_fd);
	dup2(out_fd, STDOUT_FD);
	execute_cmd(cmd2, env);
}

void pipex(char *infile, char *cmd1, char *cmd2, char *outfile, char **env)
{
	int		p[2];
	// int		pipe_result;
	pid_t	child1_pid;
	pid_t	child2_pid;	

	// pipe_result = pipe(p);
	// if (pipe_result == -1)
	// {
	// 	printf("pipe error\n");
	// 	return;
	// }
	child1_pid = fork();
	if (pid == 0)
		execute_cmd1(infile, cmd1, p, env);
	if (pid == -1)
		printf("fork error\n");
	child2_pid = fork();
	if (pid == 0)
		execute_cmd2(outfile, cmd2, p, env);
	if (pid == -1)
		printf("fork error\n");
	waitpid(child1_pid, NULL, 0);
	waitpid(child2_pid, NULL, 0);
	// parent_free(&pipex);
}

int main(int argc, char **argv, char **envp)
{
	// int i;

	// i = 0;
	// while(envp[i])
	// {
	// 	printf("%s\n", envp[i]);
	// 	i++;
	// }

	if (argc == 5)
		pipex(argv[1], argv[2], argv[3], argv[4], envp);
	else
		printf("ERROR: wrong number of arguments!");
	return 0;
}