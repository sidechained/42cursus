# symbols:
# %		matches any string of characters (wildcard)
# @		suppresses output of a command
# $^	specifies the full list of prerequisites
# $@	specifies the target
# $<	specifies the first prerequisite
# =		used to define a simple variable that is expanded at the point where it is used
# |		any prerequisites after the | are treated as order-only (used to specify dependencies that affect build order but not target contents)

# cc -Wall -Werror -Wextra -Ilibft -Iget_next_line -Iinc src/fdf.c src/fdf_draw.c src/fdf_operations2d.c src/fdf_operations3d.c src/fdf_read.c get_next_line/get_next_line.c libft/ft_strlen.c libft/ft_substr.c libft/ft_strjoin.c libft/ft_strdup.c libft/ft_split.c libft/ft_atoi.c libft/ft_isdigit.c -Lmlx_linux -lmlx_Linux -Imlx_linux -lXext -lX11 -lm -lz -o fdf && ./fdf 3x3.fdf

NAME := fdf
OBJ_DIR := obj
HDR_DIR := inc
SRC_DIR := src
LFT_DIR := libft
GNL_DIR := get_next_line
SRC := $(LFT_DIR)/ft_strlen.c
SRC += $(LFT_DIR)/ft_substr.c
SRC += $(LFT_DIR)/ft_strjoin.c
SRC += $(LFT_DIR)/ft_strdup.c
SRC += $(LFT_DIR)/ft_split.c
SRC += $(LFT_DIR)/ft_atoi.c
SRC += $(LFT_DIR)/ft_isdigit.c
SRC += $(GNL_DIR)/get_next_line.c
SRC += $(SRC_DIR)/fdf.c
SRC += $(SRC_DIR)/fdf_draw_1.c
SRC += $(SRC_DIR)/fdf_draw_2.c
SRC += $(SRC_DIR)/fdf_projections.c
SRC += $(SRC_DIR)/fdf_read.c
SRC += $(SRC_DIR)/fdf_keyloop.c
SRC += $(SRC_DIR)/fdf_transformations.c
SRC += $(SRC_DIR)/fdf_utils.c

OBJ := $(SRC:$(SRC_DIR)/%.c=$(OBJ_DIR)/%.o) # what does the equals symbol do here?

INCS := -I$(LFT_DIR) -I$(GNL_DIR) -I$(HDR_DIR)
CFLAGS := -Wall -Werror -Wextra
LIBS := -Lmlx_linux -lmlx_Linux -Imlx_linux -lXext -lX11 -lm -lz

# if program does not exist, build it by executing $NAME target
all: $(NAME)

# link .o files together to make an executable
# except they don't exist, so build them from source by executing the OBJ 
# $^ means the prerequisites, $@ means the target
$(NAME): ${OBJ}
	@make -C ./libft
	cc $(CFLAGS) $(INCS) $^ $(LIBS) -o $@

# take all the files in the src directory (i.e. pipex1.c pipex2.c) and build them into objects (i.e. pipex1.o and pipex2.o)
# this rule is triggered by the $(OBJ) prerequisite above
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
	@cc $(CFLAGS) $(INCS) -c $< -o $@

# call libft clean, then remove contents of object directory
clean:
	@make -C ./libft clean
	@rm -rf $(OBJ_DIR)/*

# call libft fclean (removes libft.a), then remove the pipex executable
fclean: clean
	@make -C ./libft fclean
	@rm -f $(NAME)

re: fclean all

.PHONY: all clean fclean re